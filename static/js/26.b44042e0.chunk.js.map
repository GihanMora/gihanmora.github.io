{"version":3,"file":"static/js/26.b44042e0.chunk.js","mappings":"kJAIMA,EAAe,SAACC,GAIpB,MADW,mEACDC,KAAKD,IAAyB,IAAhBA,EAAKE,MAC9B,EAEKC,EAAW,CACf,KACA,QACA,OACA,iDACA,sCACA,YACA,UACA,oBACA,kDACA,iBACA,qBACA,OACA,QACA,gCACA,UAqBIC,EAAY,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAInB,GAA0BC,EAAAA,EAAAA,UAAS,GAAnC,eAAOC,EAAP,KAAYC,EAAZ,KACA,GAAiCF,EAAAA,EAAAA,UAASH,EAASI,IAAnD,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA2BJ,EAAAA,EAAAA,UAAS,GAApC,eAAOK,EAAP,KAAaC,EAAb,KACA,GAAgCN,EAAAA,EAAAA,WAAS,GAAzC,eAAOO,EAAP,KAAiBC,EAAjB,KAuBA,OAhDkB,SAACC,EAAUC,GAC7B,IAAMC,GAAgBC,EAAAA,EAAAA,WAEtBC,EAAAA,EAAAA,YAAU,WACRF,EAAcG,QAAUL,CACzB,GAAE,CAACA,KAEJI,EAAAA,EAAAA,YAAU,WACR,GAAIH,EAAO,CACT,IAAMK,EAAKC,aAAY,WACrBL,EAAcG,SACf,GAAEJ,GACH,OAAO,kBAAMO,cAAcF,EAApB,CACR,CACD,OAAO,WAAQ,CAChB,GAAE,CAACL,GACL,CAWCQ,EAAY,WACV,IAAIC,EAASlB,EACTmB,EAAUf,EACVA,EAXO,IAWQR,EAASI,GAAKL,SAC/BuB,GAAU,EACVC,EAAU,GAERD,IAAWtB,EAASD,OAClBG,GACFG,EAAW,GACXI,EAAW,IAEXE,GAAY,IAGdJ,EAAcP,EAASsB,GAAQE,MAAM,EAAGD,IACxClB,EAAWiB,GACXb,EAAWc,EAAU,GAExB,GAAEb,EA1BW,GA0BQ,OAGpB,gBACEe,UAAU,mBACVC,MAAO9B,EAAaU,GAAW,CAAC,EAAI,CAAEqB,MAAO,OAC7CC,aAAc,kBAAMjB,GAAY,EAAlB,EACdkB,aAAc,kBAAOzB,EAAMJ,EAASD,QAAWY,GAAY,EAA7C,EAJhB,UAME,eAAGmB,KAAMlC,EAAaU,GAAb,mCAA6D,GAAtE,WACE,0BAAOA,KACP,gEAIP,EAEDL,EAAU8B,aAAe,CACvB7B,aAAa,GAOf,K,yFC7BA,UA9DgB,kBAGZ,SAAC,IAAD,CACI8B,MAAM,2BACNC,YAAY,+DAFhB,UAIE,qBAASR,UAAU,OAAOP,GAAG,UAA7B,WACE,6BACE,gBAAKO,UAAU,QAAf,UACE,eAAI,cAAY,UAAhB,UAA0B,SAAC,KAAD,CAAMS,GAAG,WAAT,6CAK9B,4BACE,0CACA,ySAEE,yBAAI,2BACF,0DACA,yEACA,mEACA,uDACA,4DACA,sDACA,+DACA,qDACA,4DACA,2EACA,gEACA,6DAOJ,uCACA,+EACA,gBAAKC,MAAO,OAAQC,IAAG,UAAKC,GAAL,8CAEvB,oDACA,4LACA,kCACA,2DAGA,+BAAK,cAAGC,OAAO,SAASR,KAAM,uCAAzB,6CAhDC,C","sources":["components/Contact/EmailLink.js","pages/project_pages/armitage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Validates the first half of an email address.\r\nconst validateText = (text) => {\r\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\r\n  // eslint-disable-next-line no-useless-escape\r\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\r\n  return re.test(text) || text.length === 0;\r\n};\r\n\r\nconst messages = [\r\n  'hi',\r\n  'hello',\r\n  'hola',\r\n  'you-can-email-me-at-literally-anything! Really',\r\n  'well, not anything. But most things',\r\n  'like-this',\r\n  'or-this',\r\n  'but not this :(  ',\r\n  'you.can.also.email.me.with.specific.topics.like',\r\n  'just-saying-hi',\r\n  'please-work-for-us',\r\n  'help',\r\n  'admin',\r\n  'or-I-really-like-your-website',\r\n  'thanks',\r\n];\r\n\r\nconst useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const id = setInterval(() => {\r\n        savedCallback.current();\r\n      }, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n    return () => {}; // pass linter\r\n  }, [delay]);\r\n};\r\n\r\nconst EmailLink = ({ loopMessage }) => {\r\n  const hold = 50; // ticks to wait after message is complete before rendering next message\r\n  const delay = 50; // tick length in mS\r\n\r\n  const [idx, updateIter] = useState(0); // points to current message\r\n  const [message, updateMessage] = useState(messages[idx]);\r\n  const [char, updateChar] = useState(0); // points to current char\r\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\r\n\r\n  useInterval(() => {\r\n    let newIdx = idx;\r\n    let newChar = char;\r\n    if (char - hold >= messages[idx].length) {\r\n      newIdx += 1;\r\n      newChar = 0;\r\n    }\r\n    if (newIdx === messages.length) {\r\n      if (loopMessage) {\r\n        updateIter(0);\r\n        updateChar(0);\r\n      } else {\r\n        setIsActive(false);\r\n      }\r\n    } else {\r\n      updateMessage(messages[newIdx].slice(0, newChar));\r\n      updateIter(newIdx);\r\n      updateChar(newChar + 1);\r\n    }\r\n  }, isActive ? delay : null);\r\n\r\n  return (\r\n    <div\r\n      className=\"inline-container\"\r\n      style={validateText(message) ? {} : { color: 'red' }}\r\n      onMouseEnter={() => setIsActive(false)}\r\n      onMouseLeave={() => (idx < messages.length) && setIsActive(true)}\r\n    >\r\n      <a href={validateText(message) ? `mailto:gihangamage2015@gmail.com` : ''}>\r\n        <span>{message}</span>\r\n        <span> >> gihangamage2015@gmail.com</span>\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nEmailLink.defaultProps = {\r\n  loopMessage: false,\r\n};\r\n\r\nEmailLink.propTypes = {\r\n  loopMessage: PropTypes.bool,\r\n};\r\n\r\nexport default EmailLink;\r\n","import React from 'react';\r\nimport {Link, useLocation} from 'react-router-dom';\r\n\r\nimport Main from '../../layouts/Main';\r\nimport EmailLink from '../../components/Contact/EmailLink';\r\nimport ContactIcons from '../../components/Contact/ContactIcons';\r\n\r\n\r\n\r\nconst Contact = () => (\r\n\r\n\r\n    <Main\r\n        title=\"LEAD Generation Pipeline\"\r\n        description=\"Contact Gihan Gamage via email @ michael.l.dangelo@gmail.com\"\r\n    >\r\n      <article className=\"post\" id=\"contact\">\r\n        <header>\r\n          <div className=\"title\">\r\n            <h2 data-testid=\"heading\"><Link to=\"/contact\">LEAD Generation Pipeline</Link></h2>\r\n          </div>\r\n\r\n\r\n        </header>\r\n        <div>\r\n          <h3>Introduction</h3>\r\n          <p>The main objective of this project was to construct organization profiles using the available information in the internet. It utilizes various web scraping and information\r\n            extraction components to support that. Following are the components in lead generation pipeline.\r\n            <ul><ul>\r\n              <li>Google search result scraper</li>\r\n              <li>Crunchbase web profile filter and extractor</li>\r\n              <li>Open Corporates web profile extractor</li>\r\n              <li>D&B web profile extractor</li>\r\n              <li>Avention web profile extractor</li>\r\n              <li>Google address extractor</li>\r\n              <li>Google telephone number extractor</li>\r\n              <li>Google CEO/MD extractor</li>\r\n              <li>Website contact page extractor</li>\r\n              <li>Linkedin information extractor through Google</li>\r\n              <li>Owler Q&A extractor through Google</li>\r\n              <li>Deep crawler on website</li>\r\n\r\n\r\n            </ul></ul>\r\n\r\n          </p>\r\n\r\n          <h3>Framework</h3>\r\n          <p>Following figure depicts lead generation pipeline.</p>\r\n          <img width={'100%'} src={`${process.env.PUBLIC_URL}/images/projects/armitage_framework.png`}  />\r\n\r\n          <h3>Technologies and areas</h3>\r\n          <p>Azure services(Virtual Machines, Storage queues), MongoDB, Python, Flask, Web Crawling, HTML, NLP(keyword/topic extraction, text clustering and classification)</p>\r\n          <h3>Team</h3>\r\n          <p>Nishan Mills, Gihan Gamage(me)</p>\r\n\r\n\r\n          <h4> <a target=\"_blank\" href={\"https://github.com/CDAC-lab/armitage\"}>See project on Github</a></h4>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n      </article>\r\n    </Main>\r\n);\r\n\r\nexport default Contact;\r\n"],"names":["validateText","text","test","length","messages","EmailLink","loopMessage","useState","idx","updateIter","message","updateMessage","char","updateChar","isActive","setIsActive","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newIdx","newChar","slice","className","style","color","onMouseEnter","onMouseLeave","href","defaultProps","title","description","to","width","src","process","target"],"sourceRoot":""}